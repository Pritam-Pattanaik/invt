// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum UserRole {
  SUPER_ADMIN
  ADMIN
  MANAGER
  FRANCHISE_MANAGER
  COUNTER_OPERATOR
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum ProductionStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum QualityStatus {
  PENDING
  PASSED
  FAILED
  REWORK_REQUIRED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  IN_PREPARATION
  READY
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
}

enum InventoryTransactionType {
  PURCHASE
  PRODUCTION
  SALE
  TRANSFER
  ADJUSTMENT
  WASTE
}

// Core Models
model User {
  id          String     @id @default(cuid())
  email       String     @unique
  password    String
  firstName   String
  lastName    String
  phone       String?
  role        UserRole
  status      UserStatus @default(ACTIVE)
  isActive    Boolean    @default(true)
  lastLogin   DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  createdOrders     Order[]     @relation("CreatedBy")
  qualityChecks     QualityCheck[]
  inventoryTransactions InventoryTransaction[]
  createdHotels     Hotel[]     @relation("CreatedBy")
  managedHotels     Hotel[]     @relation("ManagedBy")
  createdHostels    Hostel[]    @relation("CreatedBy")
  managedHostels    Hostel[]    @relation("ManagedBy")

  @@map("users")
}

// Manufacturing Models
model Product {
  id          String   @id @default(cuid())
  name        String
  description String?
  sku         String   @unique
  category    String
  unitPrice   Decimal  @db.Decimal(10, 2)
  costPrice   Decimal  @db.Decimal(10, 2)
  unit        String   // pieces, kg, etc.
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  recipes           Recipe[]
  inventoryItems    InventoryItem[]
  productionBatches ProductionBatch[]
  orderItems        OrderItem[]
  posTransactionItems POSTransactionItem[]

  @@map("products")
}

model Recipe {
  id          String @id @default(cuid())
  productId   String
  name        String
  description String?
  yield       Int    // quantity produced
  isActive    Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  product     Product @relation(fields: [productId], references: [id])
  ingredients RecipeIngredient[]
  productionBatches ProductionBatch[]

  @@map("recipes")
}

model RawMaterial {
  id          String   @id @default(cuid())
  name        String
  description String?
  sku         String   @unique
  unit        String   // kg, liters, pieces
  costPrice   Decimal  @db.Decimal(10, 2)
  supplier    String?
  minStock    Int      @default(0)
  maxStock    Int      @default(1000)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  inventoryItems InventoryItem[]
  recipeIngredients RecipeIngredient[]

  @@map("raw_materials")
}

model RecipeIngredient {
  id            String @id @default(cuid())
  recipeId      String
  rawMaterialId String
  quantity      Decimal @db.Decimal(10, 3)
  unit          String
  createdAt     DateTime @default(now())

  // Relations
  recipe      Recipe      @relation(fields: [recipeId], references: [id])
  rawMaterial RawMaterial @relation(fields: [rawMaterialId], references: [id])

  @@unique([recipeId, rawMaterialId])
  @@map("recipe_ingredients")
}

model InventoryItem {
  id              String   @id @default(cuid())
  productId       String?
  rawMaterialId   String?
  currentStock    Int      @default(0)
  reservedStock   Int      @default(0)
  availableStock  Int      @default(0)
  reorderPoint    Int      @default(0)
  lastUpdated     DateTime @default(now())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  product         Product?     @relation(fields: [productId], references: [id])
  rawMaterial     RawMaterial? @relation(fields: [rawMaterialId], references: [id])
  transactions    InventoryTransaction[]

  @@map("inventory_items")
}

model InventoryTransaction {
  id              String                   @id @default(cuid())
  inventoryItemId String
  type            InventoryTransactionType
  quantity        Int
  unitPrice       Decimal?                 @db.Decimal(10, 2)
  totalAmount     Decimal?                 @db.Decimal(10, 2)
  reference       String?                  // Reference to order, production batch, etc.
  notes           String?
  createdBy       String
  createdAt       DateTime                 @default(now())

  // Relations
  inventoryItem InventoryItem @relation(fields: [inventoryItemId], references: [id])
  user          User          @relation(fields: [createdBy], references: [id])

  @@map("inventory_transactions")
}

model ProductionBatch {
  id              String           @id @default(cuid())
  batchNumber     String           @unique
  productId       String
  recipeId        String
  plannedQuantity Int
  actualQuantity  Int?
  status          ProductionStatus @default(PLANNED)
  startDate       DateTime?
  endDate         DateTime?
  notes           String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  // Relations
  product       Product        @relation(fields: [productId], references: [id])
  recipe        Recipe         @relation(fields: [recipeId], references: [id])
  qualityChecks QualityCheck[]

  @@map("production_batches")
}

model QualityCheck {
  id                String        @id @default(cuid())
  productionBatchId String
  checkType         String        // Raw Material, In-Process, Final Product
  parameter         String        // Taste, Texture, Color, etc.
  expectedValue     String?
  actualValue       String?
  status            QualityStatus @default(PENDING)
  notes             String?
  checkedBy         String
  checkedAt         DateTime      @default(now())
  createdAt         DateTime      @default(now())

  // Relations
  productionBatch ProductionBatch @relation(fields: [productionBatchId], references: [id])
  user            User            @relation(fields: [checkedBy], references: [id])

  @@map("quality_checks")
}

// Hotel Management Models
model Hotel {
  id              String    @id @default(cuid())
  name            String
  code            String    @unique
  managerName     String
  managerEmail    String
  managerPhone    String
  address         String
  city            String
  state           String
  pincode         String
  gstNumber       String?
  licenseNumber   String?
  status          String    @default("ACTIVE") // ACTIVE, INACTIVE, SUSPENDED
  openingDate     DateTime?
  createdBy       String
  managedBy       String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  creator         User      @relation("CreatedBy", fields: [createdBy], references: [id])
  manager         User?     @relation("ManagedBy", fields: [managedBy], references: [id])
  orders          HotelOrder[]

  @@map("hotels")
}

// Hostel Management Models
model Hostel {
  id              String    @id @default(cuid())
  name            String
  code            String    @unique
  managerName     String
  managerEmail    String
  managerPhone    String
  address         String
  city            String
  state           String
  pincode         String
  gstNumber       String?
  licenseNumber   String?
  status          String    @default("ACTIVE") // ACTIVE, INACTIVE, SUSPENDED
  openingDate     DateTime?
  createdBy       String
  managedBy       String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  creator         User      @relation("CreatedBy", fields: [createdBy], references: [id])
  manager         User?     @relation("ManagedBy", fields: [managedBy], references: [id])
  orders          HostelOrder[]

  @@map("hostels")
}

model Counter {
  id          String   @id @default(cuid())
  name        String
  location    String
  managerName String?
  managerPhone String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  orders    Order[]
  sales     Sale[]
  counterOrders CounterOrder[]
  counterInventory CounterInventory[]

  @@map("counters")
}

// Hotel Daily Orders
model HotelOrder {
  id          String   @id @default(cuid())
  hotelId     String
  orderDate   DateTime @default(now())
  totalQuantity Int
  totalPackets  Int
  status      String   @default("DELIVERED") // PENDING, DELIVERED
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  hotel Hotel @relation(fields: [hotelId], references: [id])
  items HotelOrderItem[]

  @@map("hotel_orders")
}

model HotelOrderItem {
  id            String   @id @default(cuid())
  hotelOrderId  String
  packetSize    Int      // Number of rotis per packet
  quantity      Int      // Number of packets
  totalRotis    Int      // packetSize * quantity
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  hotelOrder HotelOrder @relation(fields: [hotelOrderId], references: [id], onDelete: Cascade)

  @@map("hotel_order_items")
}

// Hostel Daily Orders
model HostelOrder {
  id          String   @id @default(cuid())
  hostelId    String
  orderDate   DateTime @default(now())
  totalQuantity Int
  totalPackets  Int
  status      String   @default("DELIVERED") // PENDING, DELIVERED
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  hostel Hostel @relation(fields: [hostelId], references: [id])
  items  HostelOrderItem[]

  @@map("hostel_orders")
}

model HostelOrderItem {
  id             String   @id @default(cuid())
  hostelOrderId  String
  packetSize     Int      // Number of rotis per packet
  quantity       Int      // Number of packets
  totalRotis     Int      // packetSize * quantity
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  hostelOrder HostelOrder @relation(fields: [hostelOrderId], references: [id], onDelete: Cascade)

  @@map("hostel_order_items")
}

model Customer {
  id          String   @id @default(cuid())
  name        String
  email       String?
  phone       String?
  address     String?
  loyaltyPoints Int    @default(0)
  totalSpent  Decimal  @db.Decimal(10, 2) @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  orders Order[]

  @@map("customers")
}

// Order Management Models
model Order {
  id            String      @id @default(cuid())
  orderNumber   String      @unique
  counterId     String?
  customerId    String?
  orderDate     DateTime    @default(now())
  deliveryDate  DateTime?
  deliveryTime  String?     // Time in HH:MM format (e.g., "14:30")
  status        OrderStatus @default(PENDING)
  paymentStatus String      @default("PENDING") // PENDING, PAID, PARTIAL
  totalAmount   Decimal     @db.Decimal(10, 2)
  discount      Decimal     @db.Decimal(10, 2) @default(0)
  tax           Decimal     @db.Decimal(10, 2) @default(0)
  finalAmount   Decimal     @db.Decimal(10, 2)
  paymentMethod String?     // CASH, CARD, UPI, etc.
  notes         String?
  createdBy     String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relations
  counter   Counter?    @relation(fields: [counterId], references: [id])
  customer  Customer?   @relation(fields: [customerId], references: [id])
  creator   User?       @relation("CreatedBy", fields: [createdBy], references: [id])
  items     OrderItem[]

  // Indexes for dashboard performance
  @@index([deliveryDate])
  @@index([createdAt])
  @@index([status])
  @@index([deliveryDate, status])
  @@index([createdAt, status])
  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  unitPrice Decimal @db.Decimal(10, 2)
  totalPrice Decimal @db.Decimal(10, 2)
  notes     String?
  createdAt DateTime @default(now())

  // Relations
  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  // Indexes for top products performance
  @@index([productId])
  @@index([createdAt])
  @@map("order_items")
}

model Sale {
  id          String   @id @default(cuid())
  counterId   String
  date        DateTime @default(now())
  totalSales  Decimal  @db.Decimal(10, 2)
  totalOrders Int
  avgOrderValue Decimal @db.Decimal(10, 2)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  counter   Counter   @relation(fields: [counterId], references: [id])

  @@unique([counterId, date])
  @@map("sales")
}

// Counter Order Management
model CounterOrder {
  id          String   @id @default(cuid())
  counterId   String
  orderDate   DateTime @default(now())
  totalQuantity Int
  totalPackets  Int
  status      String   @default("DELIVERED") // PENDING, DELIVERED
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  counter Counter @relation(fields: [counterId], references: [id])
  items   CounterOrderItem[]

  @@map("counter_orders")
}

model CounterOrderItem {
  id            String   @id @default(cuid())
  counterOrderId String
  packetSize    Int      // Number of rotis per packet
  quantity      Int      // Number of packets
  totalRotis    Int      // packetSize * quantity
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  counterOrder CounterOrder @relation(fields: [counterOrderId], references: [id], onDelete: Cascade)

  @@map("counter_order_items")
}

// Counter Inventory Management
model CounterInventory {
  id          String   @id @default(cuid())
  counterId   String
  date        DateTime @default(now())
  packetSize  Int      // Number of rotis per packet
  totalPackets Int     // Total packets available
  totalRotis  Int      // packetSize * totalPackets
  soldPackets Int      @default(0) // Packets sold
  soldRotis   Int      @default(0) // Rotis sold
  remainingPackets Int @default(0) // Remaining packets
  remainingRotis   Int @default(0) // Remaining rotis
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  counter Counter @relation(fields: [counterId], references: [id])

  @@unique([counterId, date, packetSize])
  @@map("counter_inventory")
}



// Additional Models for Complete ERP System

// POS Transaction Model
model POSTransaction {
  id                String   @id @default(cuid())
  transactionNumber String   @unique
  customerName      String?
  totalAmount       Decimal  @db.Decimal(10, 2)
  paymentMethod     String   // CASH, CARD, UPI
  transactionDate   DateTime @default(now())
  cashierName       String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  transactionItems POSTransactionItem[]

  // Indexes for dashboard performance
  @@index([transactionDate])
  @@index([createdAt])
  @@map("pos_transactions")
}

model POSTransactionItem {
  id              String  @id @default(cuid())
  transactionId   String
  productId       String
  quantity        Int
  unitPrice       Decimal @db.Decimal(10, 2)
  totalPrice      Decimal @db.Decimal(10, 2)
  createdAt       DateTime @default(now())

  // Relations
  transaction POSTransaction @relation(fields: [transactionId], references: [id])
  product     Product        @relation(fields: [productId], references: [id])

  @@map("pos_transaction_items")
}

// Finance Models
model Account {
  id          String   @id @default(cuid())
  name        String
  type        String   // ASSET, LIABILITY, EQUITY, REVENUE, EXPENSE
  balance     Decimal  @db.Decimal(15, 2) @default(0)
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("accounts")
}

model Expense {
  id            String   @id @default(cuid())
  title         String
  amount        Decimal  @db.Decimal(10, 2)
  category      String
  description   String?
  date          DateTime
  paymentMethod String   // CASH, BANK, CARD, UPI
  status        String   @default("PENDING") // PENDING, APPROVED, REJECTED
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("expenses")
}

model TaxRecord {
  id          String    @id @default(cuid())
  taxType     String    // GST, INCOME_TAX, TDS, PROFESSIONAL_TAX
  period      String
  amount      Decimal   @db.Decimal(10, 2)
  dueDate     DateTime
  filedDate   DateTime?
  paidDate    DateTime?
  status      String    @default("PENDING") // PENDING, FILED, PAID
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("tax_records")
}

// HR Models
model Employee {
  id               String   @id @default(cuid())
  employeeId       String   @unique
  firstName        String
  lastName         String
  email            String   @unique
  phone            String
  position         String
  department       String
  salary           Decimal  @db.Decimal(10, 2)
  joinDate         DateTime
  address          String?
  emergencyContact String?
  status           String   @default("ACTIVE") // ACTIVE, INACTIVE, ON_LEAVE
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  attendance       Attendance[]
  payroll          Payroll[]
  trainingEnrollments TrainingEnrollment[]

  @@map("employees")
}

model Attendance {
  id           String   @id @default(cuid())
  employeeId   String
  date         DateTime
  checkIn      String?
  checkOut     String?
  status       String   // PRESENT, ABSENT, LATE, HALF_DAY, LEAVE
  workingHours Decimal? @db.Decimal(4, 2)
  overtime     Decimal? @db.Decimal(4, 2)
  notes        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  employee Employee @relation(fields: [employeeId], references: [id])

  @@unique([employeeId, date])
  @@map("attendance")
}

model Payroll {
  id          String   @id @default(cuid())
  employeeId  String
  month       Int      // 1-12
  year        Int
  basicSalary Decimal  @db.Decimal(10, 2)
  allowances  Decimal  @db.Decimal(10, 2) @default(0)
  overtime    Decimal  @db.Decimal(10, 2) @default(0)
  deductions  Decimal  @db.Decimal(10, 2) @default(0)
  netSalary   Decimal  @db.Decimal(10, 2)
  status      String   @default("PENDING") // PENDING, PROCESSED, PAID
  payDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  employee Employee @relation(fields: [employeeId], references: [id])

  @@unique([employeeId, month, year])
  @@map("payroll")
}

model TrainingProgram {
  id             String   @id @default(cuid())
  title          String
  description    String?
  instructor     String
  startDate      DateTime
  endDate        DateTime
  duration       Int      // in hours
  maxParticipants Int
  location       String
  cost           Decimal  @db.Decimal(10, 2)
  status         String   @default("UPCOMING") // UPCOMING, ONGOING, COMPLETED, CANCELLED
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  enrollments TrainingEnrollment[]

  @@map("training_programs")
}

model TrainingEnrollment {
  id             String    @id @default(cuid())
  trainingId     String
  employeeId     String
  enrollmentDate DateTime  @default(now())
  status         String    @default("ENROLLED") // ENROLLED, COMPLETED, DROPPED, PENDING
  completionDate DateTime?
  score          Int?
  certificate    String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  training TrainingProgram @relation(fields: [trainingId], references: [id])
  employee Employee        @relation(fields: [employeeId], references: [id])

  @@unique([trainingId, employeeId])
  @@map("training_enrollments")
}

// Settings Models
model Setting {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("settings")
}

model Permission {
  id          String @id @default(cuid())
  name        String
  description String?
  module      String
  action      String
  createdAt   DateTime @default(now())

  // Relations
  rolePermissions RolePermission[]

  @@unique([module, action])
  @@map("permissions")
}

model RolePermission {
  id           String @id @default(cuid())
  role         UserRole
  permissionId String
  createdAt    DateTime @default(now())

  // Relations
  permission Permission @relation(fields: [permissionId], references: [id])

  @@unique([role, permissionId])
  @@map("role_permissions")
}

model Backup {
  id        String   @id @default(cuid())
  fileName  String
  size      String
  type      String   // MANUAL, AUTOMATIC
  status    String   // SUCCESS, FAILED, IN_PROGRESS
  createdAt DateTime @default(now())

  @@map("backups")
}
